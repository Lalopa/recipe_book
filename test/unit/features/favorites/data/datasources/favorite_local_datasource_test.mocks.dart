// Mocks generated by Mockito 5.4.6 from annotations
// in recipe_book/test/unit/features/favorites/data/datasources/favorite_local_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recipe_book/core/cache/managers/objectbox_cache_manager.dart'
    as _i2;
import 'package:recipe_book/features/favorites/data/models/favorite_meal_model.dart'
    as _i6;
import 'package:recipe_book/features/meals/data/models/meal_model.dart' as _i5;
import 'package:recipe_book/objectbox.g.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ObjectBoxCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockObjectBoxCacheManager extends _i1.Mock
    implements _i2.ObjectBoxCacheManager {
  MockObjectBoxCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize(_i3.Store? store) => super.noSuchMethod(
    Invocation.method(#initialize, [store]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> cacheMeals(
    String? key,
    List<_i5.MealModel>? meals, {
    Duration? ttl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#cacheMeals, [key, meals], {#ttl: ttl}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.MealModel>?> getCachedMeals(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedMeals, [key]),
            returnValue: _i4.Future<List<_i5.MealModel>?>.value(),
          )
          as _i4.Future<List<_i5.MealModel>?>);

  @override
  _i4.Future<_i5.MealModel?> getCachedMeal(String? mealId) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedMeal, [mealId]),
            returnValue: _i4.Future<_i5.MealModel?>.value(),
          )
          as _i4.Future<_i5.MealModel?>);

  @override
  _i4.Future<void> toggleFavorite(String? mealId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, [mealId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setFavorite({
    required String? mealId,
    required bool? isFavorite,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setFavorite, [], {
              #mealId: mealId,
              #isFavorite: isFavorite,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.FavoriteMealModel>> getFavoriteMeals() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteMeals, []),
            returnValue: _i4.Future<List<_i6.FavoriteMealModel>>.value(
              <_i6.FavoriteMealModel>[],
            ),
          )
          as _i4.Future<List<_i6.FavoriteMealModel>>);

  @override
  _i4.Future<bool> isFavorite(String? mealId) =>
      (super.noSuchMethod(
            Invocation.method(#isFavorite, [mealId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<dynamic>?> getCachedSearchResults(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSearchResults, [query]),
            returnValue: _i4.Future<List<dynamic>?>.value(),
          )
          as _i4.Future<List<dynamic>?>);
}
