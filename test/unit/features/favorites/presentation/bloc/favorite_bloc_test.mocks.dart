// Mocks generated by Mockito 5.4.6 from annotations
// in recipe_book/test/unit/features/favorites/presentation/bloc/favorite_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recipe_book/features/favorites/domain/entities/favorite_meal.dart'
    as _i5;
import 'package:recipe_book/features/favorites/domain/repositories/favorite_repository.dart'
    as _i2;
import 'package:recipe_book/features/favorites/domain/usecases/check_favorite_status.dart'
    as _i7;
import 'package:recipe_book/features/favorites/domain/usecases/get_favorite_meals.dart'
    as _i3;
import 'package:recipe_book/features/favorites/domain/usecases/toggle_favorite.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFavoriteRepository_0 extends _i1.SmartFake
    implements _i2.FavoriteRepository {
  _FakeFavoriteRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetFavoriteMeals].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoriteMeals extends _i1.Mock implements _i3.GetFavoriteMeals {
  MockGetFavoriteMeals() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFavoriteRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FavoriteRepository);

  @override
  _i4.Future<List<_i5.FavoriteMeal>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.FavoriteMeal>>.value(
              <_i5.FavoriteMeal>[],
            ),
          )
          as _i4.Future<List<_i5.FavoriteMeal>>);
}

/// A class which mocks [ToggleFavorite].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleFavorite extends _i1.Mock implements _i6.ToggleFavorite {
  MockToggleFavorite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFavoriteRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FavoriteRepository);

  @override
  _i4.Future<void> call(String? mealId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [mealId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [CheckFavoriteStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckFavoriteStatus extends _i1.Mock
    implements _i7.CheckFavoriteStatus {
  MockCheckFavoriteStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFavoriteRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FavoriteRepository);

  @override
  _i4.Future<bool> call(String? mealId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [mealId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
