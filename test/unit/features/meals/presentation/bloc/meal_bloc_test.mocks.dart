// Mocks generated by Mockito 5.4.6 from annotations
// in recipe_book/test/unit/features/meals/presentation/bloc/meal_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recipe_book/features/meals/domain/entities/meal.dart' as _i5;
import 'package:recipe_book/features/meals/domain/repositories/meal_repository.dart'
    as _i2;
import 'package:recipe_book/features/meals/domain/usecases/get_meals.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMealRepository_0 extends _i1.SmartFake
    implements _i2.MealRepository {
  _FakeMealRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetMealsByLetter].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMealsByLetter extends _i1.Mock implements _i3.GetMealsByLetter {
  MockGetMealsByLetter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MealRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMealRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MealRepository);

  @override
  _i4.Future<List<_i5.Meal>> call(String? letter) =>
      (super.noSuchMethod(
            Invocation.method(#call, [letter]),
            returnValue: _i4.Future<List<_i5.Meal>>.value(<_i5.Meal>[]),
          )
          as _i4.Future<List<_i5.Meal>>);
}
